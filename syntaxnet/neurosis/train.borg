// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//==============================================================================

import "//production/borg/platforms-gpus/templates/cuda.borg" as cuda_tmpl

vars = {
  cell = 'lg'
  arg_prefix = 'brain_parser'  // or brain_pos train the pos tagger
  job_suffix = ''  // a string to append to the launched borg job names
  hidden_layer_sizes = '200x200'
  num_epochs = 10
  max_steps = 75
  projectivize = false
  compute_lexicon = false
  training_corpus = 'training-corpus'
  tuning_corpus = 'tuning-corpus'
  task_context = 'pkg/context.pbtxt'
  word_embeddings = '/cns/lg-d/home/chrisalberti/saft_opensource/data/word2vec-embedding-bi-true-64.tf.recordio'
  pretrained_parameters = external
  output_path = external
  use_google_runtime = false
}

template job neurosis-tmpl = {
  binary = '../../../../../blaze-bin/nlp/saft/components/dependencies/opensource/parser_trainer.par'
  grid = external
  replicas = len(grid)
  task_args = {
    lr = map(lambda x: x.lr, grid)
    ds = map(lambda x: x.ds, grid)
    mom = map(lambda x: x.mom, grid)
    s = map(lambda x: x.s, grid)
    da = map(lambda x: x.da, grid)
  }
  packages {
    package pkg {
      files = [ 'context.pbtxt',
                'context_parser_only.pbtxt' ]
    }
  }
  args = {
    brain_port = cond(vars.use_google_runtime, '%port%', null)
    tf_master = cond(vars.use_google_runtime, 'local', null)
    arg_prefix = vars.arg_prefix
    hidden_layer_sizes = replace(vars.hidden_layer_sizes, 'x', ',')
    projectivize_training_set = vars.projectivize
    compute_lexicon = vars.compute_lexicon
    training_corpus = vars.training_corpus
    tuning_corpus = vars.tuning_corpus
    task_context = vars.task_context
    word_embeddings = vars.word_embeddings
    learning_rate = '%lr%'
    decay_steps = '%ds%'
    momentum = '%mom%'
    seed = '%s%'
    averaging_decay = '%da%'
    params = vars.hidden_layer_sizes + '-%lr%-%ds%-%mom%-%s%-%da%'
    batch_size = 32
    num_epochs = vars.num_epochs
    optimizer = 'momentum'
    output_path = vars.output_path
    cfs_log_all_errors = false
  }
  runtime {
    cell = vars.cell
  }
  scheduling {
    max_task_failures = -1
    max_per_task_failures = 3
    priority = 100
    batch_quota = {
      strategy = 'RUN_SOON'
    }
  }
  requirements {
    ram = 5G
    disk = 5G
    cpu = 10
    autopilot = false
  }
  accounting = {
    charged_user = 'saft'
  }
  appclass {
    type = 'LATENCY_SENSITIVE_SECONDARY'
  }
}

expansion greedy-grid-exp(lr, ds, mom, s, da) = [{
    lr = [0.08, 0.05],
    ds = [4400, 4000, 3600]
    mom = [0.9, 0.85]
    s = [0, 1, 2]
    da = [1, 0.9999]
  }]

job neurosis-greedy = neurosis-tmpl {
  name = 'neurosis-greedy-' + vars.arg_prefix + vars.job_suffix
  grid = greedy-grid-exp()
  args {
    graph_builder = 'greedy'
  }
}

expansion beam-grid-exp(lr, ds, mom, da, s) = [
    {
      lr = [0.05, 0.02, 0.003],
      ds = [40_000, 10_000, 1_000, 100]
      mom = [0.8, 0.9]
      s = [0, 1]
      da = [1, 0.9999]
    }
]

job neurosis-beam = neurosis-tmpl {
  name = 'neurosis-beam-' + vars.arg_prefix + vars.job_suffix
  grid = beam-grid-exp()
  args {
    graph_builder = 'structured'
    beam_size = 8
    batch_size = 8
    report_every = 50
    checkpoint_every = 2000
    max_steps = vars.max_steps
    pretrained_params = vars.pretrained_parameters
    pretrained_params_names = join(['embedding_matrix_0',
                                    'embedding_matrix_1',
                                    'embedding_matrix_2',
                                    'embedding_matrix_3',
                                    'embedding_matrix_4',
                                    'embedding_matrix_5',
                                    'bias_0',
                                    'weights_0',
                                    'bias_1',
                                    'weights_1'], ',')
  }
  requirements {
    ram = 4G
    cpu = 15
  }
}

gpu-mixin = lambda base: base {
  name = base.name + '_gpu'
  packages = cuda_tmpl.cuda_job.packages
  requirements {
    gpu = 1
    constraints = "platform_plugin:tesla_k20m=8"
  }
  assert vars.use_google_runtime
}

neurosis-greedy-gpu = gpu-mixin(neurosis-greedy)

neurosis-beam-gpu = gpu-mixin(neurosis-beam)
